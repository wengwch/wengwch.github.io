<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://wanchunw.com/</id><title>wanchunw</title><subtitle>wanchun's blog</subtitle> <updated>2025-02-24T23:22:11+08:00</updated> <author> <name>wanchun</name> <uri>https://wanchunw.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://wanchunw.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://wanchunw.com/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 wanchun </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>protobuf encoding 解析</title><link href="https://wanchunw.com/posts/protobuf-encoding/" rel="alternate" type="text/html" title="protobuf encoding 解析" /><published>2021-02-12T06:00:00+08:00</published> <updated>2021-02-12T06:00:00+08:00</updated> <id>https://wanchunw.com/posts/protobuf-encoding/</id> <content src="https://wanchunw.com/posts/protobuf-encoding/" /> <author> <name>wanchun</name> </author> <category term="Programing Language" /> <summary> Protobuf是谷歌推出的跨语言，跨平台，可扩展的数据序列化机制，相比XML，JSON等序列化方式，它具有更简单，更快，更小的优点，其中体积更小的优点得益于它的encoding方式。 Protobuf 消息是一种key-value形式的结构，如下图所示 其中Key包含了field_number和wire_type，计算公式： key = (field_number &amp;lt;&amp;lt; 3) | wire_type wire_type就是protobuf的编码方式，可用的wire_type和pb对应的数据类型如下: Type Meaning Used For 0 Varint int32, int64, uint32, uint64, sint32,... </summary> </entry> <entry><title>JDK源码学习之LinkedHashMap</title><link href="https://wanchunw.com/posts/jdk-linkedhashmap/" rel="alternate" type="text/html" title="JDK源码学习之LinkedHashMap" /><published>2017-01-07T22:30:29+08:00</published> <updated>2017-01-07T22:30:29+08:00</updated> <id>https://wanchunw.com/posts/jdk-linkedhashmap/</id> <content src="https://wanchunw.com/posts/jdk-linkedhashmap/" /> <author> <name>wanchun</name> </author> <category term="Programing Language" /> <summary> LinkedHashMap继承了HashMap，其行为和HashMap类似，只是在内部多维护了一个元素结点的双向链表。官方文档描述如下： Hash table and linked list implementation of the Map interface, with predictable iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted in... </summary> </entry> <entry><title>Java8之lambda表达式</title><link href="https://wanchunw.com/posts/java8-lambda/" rel="alternate" type="text/html" title="Java8之lambda表达式" /><published>2016-11-27T06:44:50+08:00</published> <updated>2016-11-27T06:44:50+08:00</updated> <id>https://wanchunw.com/posts/java8-lambda/</id> <content src="https://wanchunw.com/posts/java8-lambda/" /> <author> <name>wanchun</name> </author> <category term="Programing Language" /> <summary> Lambda表达式是Java8最重要也最令人期待的特性，它使得Java初步具有了函数式编程的能力。虽然Lambda表达式的本质只是基于接口的语法糖，但是依然可以给开发带来便利，尤其是Stream的引入，使对集合的操作变的更加方便和强大。 lambda 表达式 lambda表达式格式: (param1, param2, ...) -&amp;gt; expression, 如果不能用一个表达式表示运行的代码，可以使用以下方式: (param1, param2, ...) -&amp;gt; { statement1; statement2; ... statementN; return expr; } 函数式接口 含有单一方法的接口称为SAM(Single Abstract Method，单抽象方法)接口。函数式接口是对旧有SAM接口的增强，它允... </summary> </entry> <entry><title>JDK源码学习之ConcurrentHashMap</title><link href="https://wanchunw.com/posts/jdk-concurrenthashmap/" rel="alternate" type="text/html" title="JDK源码学习之ConcurrentHashMap" /><published>2016-11-13T19:17:40+08:00</published> <updated>2016-11-13T19:17:40+08:00</updated> <id>https://wanchunw.com/posts/jdk-concurrenthashmap/</id> <content src="https://wanchunw.com/posts/jdk-concurrenthashmap/" /> <author> <name>wanchun</name> </author> <category term="Programing Language" /> <summary> 概述 上一篇介绍了HashMap的代码实现。众所周知，HashMap不是线程安全的，那么怎样让HashMap变得线程安全呢，最简单的方法就是给HashMap的方法加上synchronized，使其变为同步的，HashTable就是这么干的。这样虽然能解决并发的问题，但是由于锁粒度太大，多线程时竞争激烈，效率很低，因此并不推荐使用。在并发环境下，有更好的选择ConcurrentHashMap ConcurrentHashMap在java7中使用分段锁的机制减小锁粒度，提高并发效率。但是在java8中，已经抛弃了这种实现，使用更加高效的CAS自旋的方式进一步提升HashMap在并发环境中的效率。 这篇主要介绍一下put和resize过程的实现。 关键字段和方法 在看源代码之前，先了解一下ConcurrentHashMap的几个关键字段和方法。 先看一下几个关键的字段。 ... </summary> </entry> <entry><title>JDK源码学习之HashMap</title><link href="https://wanchunw.com/posts/jdk-hashmap/" rel="alternate" type="text/html" title="JDK源码学习之HashMap" /><published>2016-11-06T04:45:01+08:00</published> <updated>2016-11-06T04:45:01+08:00</updated> <id>https://wanchunw.com/posts/jdk-hashmap/</id> <content src="https://wanchunw.com/posts/jdk-hashmap/" /> <author> <name>wanchun</name> </author> <category term="Programing Language" /> <summary> 1. 概述 HashMap是Java开发中最常用的数据结构，阅读源码有助于我们了解其工作原理及实现。关于HashMap的特性，可以参考官方文档： Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of t... </summary> </entry> </feed>
